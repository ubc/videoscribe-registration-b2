/* To prevent this building block's CSS from having unintentional effects, put
 * it all under the wrapping ng-app div's class. One reason for using SASS is
 * the easy way that we can specify nested rules. In this example, every rule
 * is nested under the TemplateApp class without having to respecify the
 * TemplateApp selector for every rule. */
.VideoScribeRegistrationAdmin
{
	/* SASS lets you declare variables, these are scoped to .TemplateApp */
	$successColor: green;
	$processingColor: royalblue;
	$errorColor: firebrick;
	$modeBlockWidth: 20em;

	form
	{
		font-size: 1.1em;
	}

	/* The mode selection blocks */
	.modeBlock
	{
		margin-top: 1em;
		display: inline-block;
		width: $modeBlockWidth;
		label
		{
			padding: 0.5em 0.5em 0.7em 0;
			&.modeSelectLabel
			{
				display: block;
				text-align: center;
				input 
				{
					margin: 0;
					margin-right: 0.2em;
				}
			}
			&.alignedLabel
			{
				padding: 0.5em 0.5em 0.7em 0;
				text-align: right;
				display: inline-block;
				width: $modeBlockWidth / 4;
			}
			&.smallText
			{
				padding: 0;
				font-size: 0.9em;
			}
		}
		input
		{
			padding: 0.2em;
		}
	}
	.centerSubmit
	{
		width: $modeBlockWidth * 2;
		margin-top: 1em;
		input
		{
			margin: 0 auto;
			display: block;
			padding: 0.3em 0.6em;
		}
	}

	/* The status indicators for the form submit */
	span
	{
		padding: 0.5em;
		color: white;
		/* & is replaced with the parent, in this case, it compiles to
		 * "span.working". Without the &, it compiles to "span .working", the
		 * only difference is the space between span and .working which gives
		 * them different CSS meanings. */
		&.processing
		{
			background-color: $processingColor;
		}
		&.success
		{
			background-color: $successColor;
		}
		&.error
		{
			background-color: $errorColor;
		}
	}
}
